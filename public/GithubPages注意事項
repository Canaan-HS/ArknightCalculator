Github Pages 是Github的一項功能，可免費部屬靜態應用程式 (純前端無後端)。


基本設置:
1. 將倉庫權限設置為public (private雖然也可以使用Github Pages功能，但需要額外付費)
2. 開啟[倉庫 > Setting > Pages]，設定選項[Source]，此處有兩個選項可選擇
設定選項[Source] = [Deploy from a branch]，則使用Branch的部屬方式
設定選項[Source] = [Github Actions]，則使用Action的部屬方式
(目前會建議使用Action的部屬方式)


Branch部屬方式:
(使用這個部屬方式，Github會自動為該倉庫新增一個gh-pages分支，並自動部屬該分支)
1. 選項[Branch] = [gh-pages /(root)]
2. 專案中CMD執行 `npm install gh-pages --save-dev` 下載Github Pages套件
3. package.json 新增以下內容
```
{
    "homepage": "https://<Github帳戶名稱>.github.io/<倉庫名稱>",
    "scripts": {
    "predeploy": "npm run build",
    "deploy": "gh-pages -d build"
  },
}
```
4. CMD執行 `npm run deploy` 即可，會將專案打包後並自動推送至倉庫的gh-pages分支並自動部屬


Action部屬方式:
(使用這個部屬方式)
1. 專案根目錄新增[.github/workflows/任意名稱.yml]
2. Github Actions透過yml檔的設定來執行操作，以下是一個簡單的範例
```

```


如果以上設置沒有錯誤，則訪問以下網址即可成功瀏覽到網站內容
`https://<Github帳戶名稱>.github.io/<倉庫名稱>/` 或者 `https://<Github帳戶名稱>.github.io/<倉庫名稱>/index.html`

備註:
如果專案有使用fetch()請求相對路徑，
ex: React專案預設帶有public資料夾，public資料夾下的資源，在開發環境下本可以直接用 `fetch('/ABC.jpg')` 請求到，
但是這樣在部屬環境下會請求不到，需改成 `fetch(`${process.env.PUBLIC_URL}/ABC.jpg`)` 才能請求到，
${process.env.PUBLIC_URL}是React的一項參數，可自動辨識當前環境的根目錄。

部屬不是及時完成的，部屬完就馬上瀏覽網站可能看不到變化，需等待一小段時間。

2. 透過 GitHub Actions 的部署方式

  3. 同樣像上述說明創建 package.json 和 package-lock.json 在根目錄下, 填寫依賴套件
  4. 創建 .github/workflows/任意名稱.yml
  5. 開啟[倉庫 > Actions > Run workflow]
  6. 完成部署 (會在工作流顯示狀態, 當他打上綠燈代表完成)