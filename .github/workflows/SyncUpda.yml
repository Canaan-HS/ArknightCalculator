name: 同步復刻

on:
  schedule:
    # 台灣時間午夜 00:00 (UTC+8) 相當於 UTC 16:00 (前一天)
    - cron: '0 16 * * *'
  workflow_dispatch: # 允許手動觸發

permissions:
  actions: write
  checks: write
  contents: write

jobs:
  sync-fork:
    runs-on: ubuntu-latest

    steps:
      - name: 取得代碼
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          # 確保檢出 master 分支
          ref: master

      - name: 檢測是否為復刻倉庫
        id: check-fork
        run: |
          REPO_FULL_NAME="${GITHUB_REPOSITORY}"

          if git remote -v | grep -q upstream; then
            echo "這是復刻倉庫，已存在上遊遠程"
            echo "IS_FORK=true" >> $GITHUB_OUTPUT
          else
            # 嘗試從 API 獲取 fork 信息
            REPO_INFO=$(curl -s -H "Authorization: token ${{ github.token }}" \
              "https://api.github.com/repos/${REPO_FULL_NAME}")

            if echo "$REPO_INFO" | grep -q '"fork": true'; then
              echo "這是復刻倉庫"
              PARENT_REPO="https://github.com/Kaosu-Niku/ArknightCalculator.git"
              echo "上遊倉庫 URL: $PARENT_REPO"
              git remote add upstream $PARENT_REPO
              echo "IS_FORK=true" >> $GITHUB_OUTPUT
            else
              echo "這是原始倉庫，不需要同步"
              echo "IS_FORK=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: 檢查分支狀態
        if: steps.check-fork.outputs.IS_FORK == 'true'
        id: check-branch
        run: |
          echo "開始檢查分支狀態..."
          git fetch upstream
          
          # 標記工作流文件為總是保留本地版本
          git config --local merge.ours.driver true
          echo ".github/workflows/* merge=ours" > .git/info/attributes

          # 確保我們有 upstream/master 分支並只處理 master 分支
          if git rev-parse --verify upstream/master >/dev/null 2>&1; then
            echo "檢查本地 master 是否落後於上遊 master..."

            # 確保我們在 master 分支上
            git checkout master
            
            # 獲取分支比較狀態
            BEHIND_COUNT=$(git rev-list --count master..upstream/master)

            if [ "$BEHIND_COUNT" -gt 0 ]; then
              echo "本地 master 分支落後上遊 $BEHIND_COUNT 個提交"

              # 設置為需要同步
              echo "NEED_SYNC=true" >> $GITHUB_OUTPUT

              # 在同步階段使用 -X ours 策略自動解決衝突，優先保留本地更改
              echo "MERGE_STRATEGY=-X ours" >> $GITHUB_OUTPUT

              echo "警告：同步過程中可能有衝突被自動解決，優先保留本地更改。"
            else
              echo "本地 master 分支不落後於上遊，無需同步"
              echo "NEED_SYNC=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "無法找到 upstream/master 分支，請檢查上遊倉庫配置"
            echo "NEED_SYNC=false" >> $GITHUB_OUTPUT
          fi

      - name: 配置 Git
        if: steps.check-fork.outputs.IS_FORK == 'true' && steps.check-branch.outputs.NEED_SYNC == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          echo "已配置 Git 用戶信息"

      - name: 同步 master 分支
        if: steps.check-fork.outputs.IS_FORK == 'true' && steps.check-branch.outputs.NEED_SYNC == 'true'
        run: |
          echo "開始同步 master 分支..."

          # 備份工作流文件以防萬一
          mkdir -p /tmp/workflows_backup
          cp -r .github/workflows/* /tmp/workflows_backup/ 2>/dev/null || true

          # 使用 ours 策略合併，優先保留本地更改
          git merge upstream/master --no-edit ${{ steps.check-branch.outputs.MERGE_STRATEGY }}

          # 確保工作流文件不被修改
          if [ -d "/tmp/workflows_backup" ] && [ -d ".github/workflows" ]; then
            cp -r /tmp/workflows_backup/* .github/workflows/ 2>/dev/null || true
            git add .github/workflows/* 2>/dev/null || true
            git commit --amend --no-edit 2>/dev/null || true
          fi

          # 推送到 origin master
          git push origin master

          echo "master 分支同步完成！優先保留了本地更改。"
